{"version":3,"sources":["components/UI/Button/Button.module.scss","hooks/useForm.js","components/UI/Button/Button.js","components/Form/Form.js","components/ContentPage/ContentPage.js","App.js","reportWebVitals.js","index.js","components/Form/Form.module.scss","components/ContentPage/ContentPage.module.scss"],"names":["module","exports","useForm","email","password","useState","isSubmitted","setIsSubmitted","username","password1","password2","values","setValues","Boolean","isValid","setIsValid","emptyUsername","trim","emptyEmail","emptyPassword1","emptyPassword2","invalidUsername","length","invalidEmail","test","invalidPassword1","invalidPassword2","isTouched","setIsTouched","isInvalidUsername","isInvalidEmail","isInvalidPassword1","isInvalidPassword2","isEmptyUsername","isEmptyEmail","isEmptyPassword1","isEmptyPassword2","useEffect","changeValueHandler","event","target","name","value","submitHandler","preventDefault","inputBlurHandler","propTypes","PropTypes","bool","object","func","usernameIsValid","emailIsValid","password1IsValid","Button","props","className","classes","type","onClick","children","Form","useTranslation","t","showPassword","setShowPassword","showPasswordHandler","onPassToApp","onSubmit","FormControl","htmlFor","id","placeholder","onChange","autoComplete","maxLength","onBlur","toLowerCase","checked","ContentPage","submitted","LogoutBtn","App","i18n","setSubmitted","submittedHandler","lang","setLang","changeLangHandler","changeLanguage","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","i18next","init","interpolation","escapeValue","lng","resources","es","global","global_es","en","global_en","ReactDOM","render","StrictMode","I18nextProvider","document","getElementById"],"mappings":"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","file":"static/js/main.9fdec237.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Button\":\"Button_Button__2Ajf-\"};","import { useEffect, useState } from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst useForm = () => {\n  const [isSubmitted, setIsSubmitted] = useState(false);\n  const [values, setValues] = useState({\n    username: \"\",\n    email: \"\",\n    password1: \"\",\n    password2: \"\",\n  });\n\n  // Change the values of the input fields of the form\n  const changeValueHandler = (event) => {\n    const { name, value } = event.target;\n\n    setValues({\n      ...values,\n      [name]: value,\n    });\n  };\n\n  const [isValid, setIsValid] = useState(Boolean);\n\n  const emptyUsername = values.username.trim() === \"\";\n  const emptyEmail = values.email.trim() === \"\";\n  const emptyPassword1 = values.password1.trim() === \"\";\n  const emptyPassword2 = values.password2.trim() === \"\";\n\n  // Username verification\n  const usernameIsValid = (username) => {\n    return username.length >= 6;\n  };\n\n  // Email address verification function from Tyler McGinnis\n  // https://dev.to/tylermcginnis/how-to-validate-an-email-address-in-javascript-f7i\n  const emailIsValid = (email) => {\n    return /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(email);\n  };\n\n  // Password verification\n  // At least 8 digits, including a capital letter and a number\n  const password1IsValid = (password) => {\n    return /^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z]).{8,}$/.test(password);\n  };\n\n  const invalidUsername = emptyUsername || !usernameIsValid(values.username);\n  const invalidEmail = emptyEmail || !emailIsValid(values.email);\n  const invalidPassword1 =\n    emptyPassword1 || !password1IsValid(values.password1);\n  const invalidPassword2 =\n    emptyPassword2 || values.password2 !== values.password1;\n\n  const [isTouched, setIsTouched] = useState({\n    username: false,\n    email: false,\n    password1: false,\n    password2: false,\n  });\n\n  const inputBlurHandler = (event) => {\n    const { name } = event.target;\n\n    setIsTouched({\n      ...isTouched,\n      [name]: true,\n    });\n  };\n\n  // Define when inputs are invalid\n  const isInvalidUsername =\n    (isTouched.username && invalidUsername) ||\n    (isTouched.email && invalidUsername) ||\n    (isTouched.password1 && invalidUsername) ||\n    (isTouched.password2 && invalidUsername);\n\n  const isInvalidEmail =\n    (isTouched.email && invalidEmail) ||\n    (isTouched.password1 && invalidEmail) ||\n    (isTouched.password2 && invalidEmail);\n\n  const isInvalidPassword1 =\n    (isTouched.password1 && invalidPassword1) ||\n    (isTouched.password2 && invalidPassword1);\n\n  const isInvalidPassword2 = isTouched.password2 && invalidPassword2;\n\n  // Define when inputs are empty\n  const isEmptyUsername = !isTouched.username || emptyUsername;\n  const isEmptyEmail = !isTouched.email || emptyEmail;\n  const isEmptyPassword1 = !isTouched.password1 || emptyPassword1;\n  const isEmptyPassword2 = !isTouched.password2 || emptyPassword2;\n\n  // Submit the values of the form input fields and open the content page\n  const submitHandler = (event) => {\n    event.preventDefault();\n\n    if (!isValid) {\n      return;\n    }\n\n    setIsSubmitted(true);\n  };\n\n  useEffect(() => {\n    if (\n      invalidUsername ||\n      invalidEmail ||\n      invalidPassword1 ||\n      invalidPassword2\n    ) {\n      setIsValid(false);\n    } else {\n      setIsValid(true);\n    }\n  }, [invalidEmail, invalidPassword1, invalidPassword2, invalidUsername]);\n\n  return {\n    isSubmitted,\n    values,\n    isValid,\n    invalidUsername,\n    invalidEmail,\n    invalidPassword1,\n    invalidPassword2,\n    isInvalidUsername,\n    isInvalidEmail,\n    isInvalidPassword1,\n    isInvalidPassword2,\n    isEmptyUsername,\n    isEmptyEmail,\n    isEmptyPassword1,\n    isEmptyPassword2,\n    changeValueHandler,\n    submitHandler,\n    inputBlurHandler,\n  };\n};\n\nexport default useForm;\n\nuseForm.propTypes = {\n  isSubmitted: PropTypes.bool,\n  values: PropTypes.object,\n  changeValueHandler: PropTypes.func,\n  isValid: PropTypes.bool,\n  emptyUsername: PropTypes.bool,\n  emptyEmail: PropTypes.bool,\n  emptyPassword1: PropTypes.bool,\n  emptyPassword2: PropTypes.bool,\n  usernameIsValid: PropTypes.func,\n  emailIsValid: PropTypes.func,\n  password1IsValid: PropTypes.func,\n  invalidUsername: PropTypes.bool, \n  invalidEmail: PropTypes.bool,\n  invalidPassword1: PropTypes.bool,\n  invalidPassword2: PropTypes.bool,\n  isTouched: PropTypes.object,\n  inputBlurHandler: PropTypes.func,\n  isInvalidUsername: PropTypes.bool, \n  isInvalidEmail: PropTypes.bool,\n  isInvalidPassword1: PropTypes.bool,\n  isInvalidPassword2: PropTypes.bool,\n  isEmptyUsername: PropTypes.bool, \n  isEmptyEmail: PropTypes.bool,\n  isEmptyPassword1: PropTypes.bool,\n  isEmptyPassword2: PropTypes.bool,\n  submitHandler: PropTypes.func\n}\n","import React from \"react\";\n\nimport classes from \"./Button.module.scss\";\n\nconst Button = (props) => {\n  return (\n    <button\n      className={`${classes.Button} ${props.className}`}\n      type={props.type}\n      onClick={props.onClick}\n    >\n      {props.children}\n    </button>\n  );\n};\n\nexport default Button;\n","import React, { useEffect, useState } from \"react\";\nimport useForm from \"hooks/useForm\";\nimport PropTypes from \"prop-types\";\nimport { useTranslation } from \"react-i18next\";\n\nimport classes from \"./Form.module.scss\";\nimport Button from \"components/UI/Button/Button\";\n\nconst Form = (props) => {\n  const {\n    isSubmitted,\n    values,\n    isValid,\n    invalidUsername,\n    invalidEmail,\n    invalidPassword1,\n    invalidPassword2,\n    isInvalidUsername,\n    isInvalidEmail,\n    isInvalidPassword1,\n    isInvalidPassword2,\n    isEmptyUsername,\n    isEmptyEmail,\n    isEmptyPassword1,\n    isEmptyPassword2,\n    changeValueHandler,\n    submitHandler,\n    inputBlurHandler,\n  } = useForm();\n\n  const [t] = useTranslation(\"global\");\n\n  const [showPassword, setShowPassword] = useState(false);\n\n  // Toggle between showing and not showing password\n  const showPasswordHandler = () => {\n    setShowPassword(!showPassword);\n  };\n\n  useEffect(() => {\n    // Pass the \"isSubmitted\" variable to parent component \"App\"\n    props.onPassToApp(isSubmitted);\n  });\n\n  return (\n    <form onSubmit={submitHandler} className={classes.Form}>\n      <div className={classes.FormControl}>\n        <label htmlFor=\"username\">{t(\"form.username\")}</label>\n        <input\n          id=\"username\"\n          type=\"text\"\n          name=\"username\"\n          placeholder={t(\"form.username-placeholder\")}\n          value={values.username}\n          onChange={changeValueHandler}\n          autoComplete=\"off\"\n          maxLength={25}\n          onBlur={inputBlurHandler}\n          className={`${\n            isInvalidUsername\n              ? classes[\"error\"]\n              : !invalidUsername\n              ? classes[\"verified\"]\n              : \"\"\n          }`}\n        />\n        {isInvalidUsername && !isEmptyUsername ? (\n          <small>{t(\"form.username-error-invalid\")}</small>\n        ) : isInvalidUsername ? (\n          <small>{t(\"form.username-error-empty\")}</small>\n        ) : (\n          \"\"\n        )}\n      </div>\n      <div className={classes.FormControl}>\n        <label htmlFor=\"email\">{t(\"form.email\")}</label>\n        <input\n          id=\"email\"\n          type=\"email\"\n          name=\"email\"\n          placeholder={t(\"form.email-placeholder\")}\n          value={values.email.toLowerCase()}\n          onChange={changeValueHandler}\n          autoComplete=\"off\"\n          onBlur={inputBlurHandler}\n          className={`${\n            isInvalidEmail\n              ? classes[\"error\"]\n              : !invalidEmail\n              ? classes[\"verified\"]\n              : \"\"\n          }`}\n        />\n        {isInvalidEmail && !isEmptyEmail ? (\n          <small>{t(\"form.email-error-invalid\")}</small>\n        ) : isInvalidEmail ? (\n          <small>{t(\"form.email-error-empty\")}</small>\n        ) : (\n          \"\"\n        )}\n      </div>\n      <div className={classes.FormControl}>\n        <label htmlFor=\"password1\">\n          {t(\"form.password1\")}\n          <div className={classes[\"checkbox\"]} onClick={showPasswordHandler}>\n            <input\n              type=\"checkbox\"\n              checked={showPassword}\n              onChange={showPasswordHandler}\n            />{\" \"}\n            {t(\"form.password1-checkbox\")}\n          </div>\n        </label>\n        <input\n          id=\"password1\"\n          type={showPassword ? \"text\" : \"password\"}\n          name=\"password1\"\n          placeholder={t(\"form.password1-placeholder\")}\n          value={values.password1}\n          onChange={changeValueHandler}\n          autoComplete=\"off\"\n          onBlur={inputBlurHandler}\n          className={`${\n            isInvalidPassword1\n              ? classes[\"error\"]\n              : !invalidPassword1\n              ? classes[\"verified\"]\n              : \"\"\n          }`}\n        />\n        {isInvalidPassword1 && !isEmptyPassword1 ? (\n          <small>{t(\"form.password1-error-invalid\")}</small>\n        ) : isInvalidPassword1 ? (\n          <small>{t(\"form.password1-error-empty\")}</small>\n        ) : (\n          \"\"\n        )}\n      </div>\n      <div className={classes.FormControl}>\n        <label htmlFor=\"password2\">{t(\"form.password2\")}</label>\n        <input\n          id=\"password2\"\n          type={showPassword ? \"text\" : \"password\"}\n          name=\"password2\"\n          placeholder={t(\"form.password2-placeholder\")}\n          value={values.password2}\n          onChange={changeValueHandler}\n          autoComplete=\"off\"\n          onBlur={inputBlurHandler}\n          className={`${\n            isInvalidPassword2\n              ? classes[\"error\"]\n              : !invalidPassword2\n              ? classes[\"verified\"]\n              : \"\"\n          }`}\n        />\n        {isInvalidPassword2 && !isEmptyPassword2 ? (\n          <small>{t(\"form.password2-error-invalid\")}</small>\n        ) : isInvalidPassword2 ? (\n          <small>{t(\"form.password2-error-empty\")}</small>\n        ) : (\n          \"\"\n        )}\n      </div>\n      <Button type=\"submit\" className={!isValid && \"invalid\"}>\n        {t(\"form.sign-up-button\")}\n      </Button>\n    </form>\n  );\n};\n\nexport default Form;\n\nForm.propTypes = {\n  showPassword: PropTypes.bool,\n  showPasswordHandler: PropTypes.func,\n};\n","import React, { useEffect, useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { useTranslation } from \"react-i18next\";\n\nimport classes from \"./ContentPage.module.scss\";\nimport Button from \"components/UI/Button/Button\";\n\nconst ContentPage = (props) => {\n  const { submitted } = props;\n\n  const [t] = useTranslation(\"global\");\n\n  const [isSubmitted, setIsSubmitted] = useState(submitted);\n\n  // Close the content page and the registration form appears\n  const logoutHandler = () => {\n    setIsSubmitted(!submitted);\n  };\n\n  useEffect(() => {\n    // Pass the \"isSubmitted\" variable to parent component \"App\"\n    props.onPassToApp(isSubmitted);\n  });\n\n  return (\n    <div className={classes.ContentPage}>\n      <div className={classes[\"like\"]}></div>\n      <h2>{t(\"content-page.text\")}</h2>\n      <Button\n        type=\"button\"\n        className={classes.LogoutBtn}\n        onClick={logoutHandler}\n      >\n        {t(\"content-page.logout-button\")}\n      </Button>\n    </div>\n  );\n};\n\nexport default ContentPage;\n\nContentPage.propTypes = {\n  isSubmitted: PropTypes.bool,\n  logoutHandler: PropTypes.func,\n};\n","import { useEffect, useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { useTranslation } from \"react-i18next\";\n\nimport \"./App.scss\";\nimport Form from \"components/Form/Form\";\nimport ContentPage from \"components/ContentPage/ContentPage\";\n\nfunction App() {\n  const [t, i18n] = useTranslation(\"global\");\n\n  const [submitted, setSubmitted] = useState(Boolean);\n\n  // Update the state to determine which component is displayed\n  const submittedHandler = (isSubmitted) => {\n    setSubmitted(isSubmitted);\n  };\n\n  const [lang, setLang] = useState(\"en\");\n\n  const changeLangHandler = () => {\n    if (lang === \"en\") {\n      setLang(\"es\");\n    } else {\n      setLang(\"en\");\n    }\n  };\n\n  useEffect(() => {\n    i18n.changeLanguage(lang);\n  }, [i18n, lang]);\n\n  return (\n    <div className=\"App\">\n      <header className=\"header\">\n        <h1>{t(\"app.registration-form\")}</h1>\n      </header>\n      {!submitted ? (\n        <Form onPassToApp={submittedHandler} />\n      ) : (\n        <ContentPage submitted={submitted} onPassToApp={submittedHandler} />\n      )}\n      <footer className=\"footer\">\n        <div className=\"btn-group\">\n          <button\n            className={lang === \"en\" ? \"active\" : \"\"}\n            onClick={lang === \"en\" ? null : changeLangHandler}\n          >\n            EN\n          </button>\n          <button\n            className={lang === \"es\" ? \"active\" : \"\"}\n            onClick={lang === \"es\" ? null : changeLangHandler}\n          >\n            ES\n          </button>\n        </div>\n        <span>\n          © {t(\"app.footer1\")} 2021. <strong>\"TBM85\"</strong>\n        </span>\n        <span> {t(\"app.footer2\")}</span>\n      </footer>\n    </div>\n  );\n}\n\nexport default App;\n\nApp.propTypes = {\n  submitted: PropTypes.bool,\n  submittedHandler: PropTypes.func,\n};\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { I18nextProvider } from \"react-i18next\";\nimport i18next from \"i18next\";\n\nimport global_es from \"./translations/es/global.json\";\nimport global_en from \"./translations/en/global.json\";\n\ni18next.init({\n  interpolation: { escapeValue: false },\n  lng: \"en\",\n  resources: {\n    es: {\n      global: global_es\n    },\n    en: {\n      global: global_en\n    }\n  }\n});\n\nReactDOM.render(\n  <React.StrictMode>\n    <I18nextProvider i18n={i18next}>\n      <App />\n    </I18nextProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Form\":\"Form_Form__1lAKg\",\"FormControl\":\"Form_FormControl__2lfMD\",\"checkbox\":\"Form_checkbox__HAC8t\",\"error\":\"Form_error__3GKee\",\"verified\":\"Form_verified__XxnOj\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"LogoutBtn\":\"ContentPage_LogoutBtn__2X_Rh\",\"ContentPage\":\"ContentPage_ContentPage__2v35d\",\"like\":\"ContentPage_like__1HK12\",\"movement\":\"ContentPage_movement__29-5U\"};"],"sourceRoot":""}